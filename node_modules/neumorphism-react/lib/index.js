'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var styled = _interopDefault(require('@emotion/styled'));

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

/** @license React v16.13.0
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}var AsyncMode=l;var ConcurrentMode=m;var ContextConsumer=k;var ContextProvider=h;var Element=c;var ForwardRef=n;var Fragment=e;var Lazy=t;var Memo=r;var Portal=d;
var Profiler=g;var StrictMode=f;var Suspense=p;var isAsyncMode=function(a){return A(a)||z(a)===l};var isConcurrentMode=A;var isContextConsumer=function(a){return z(a)===k};var isContextProvider=function(a){return z(a)===h};var isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};var isForwardRef=function(a){return z(a)===n};var isFragment=function(a){return z(a)===e};var isLazy=function(a){return z(a)===t};
var isMemo=function(a){return z(a)===r};var isPortal=function(a){return z(a)===d};var isProfiler=function(a){return z(a)===g};var isStrictMode=function(a){return z(a)===f};var isSuspense=function(a){return z(a)===p};
var isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};var typeOf=z;

var reactIs_production_min = {
	AsyncMode: AsyncMode,
	ConcurrentMode: ConcurrentMode,
	ContextConsumer: ContextConsumer,
	ContextProvider: ContextProvider,
	Element: Element,
	ForwardRef: ForwardRef,
	Fragment: Fragment,
	Lazy: Lazy,
	Memo: Memo,
	Portal: Portal,
	Profiler: Profiler,
	StrictMode: StrictMode,
	Suspense: Suspense,
	isAsyncMode: isAsyncMode,
	isConcurrentMode: isConcurrentMode,
	isContextConsumer: isContextConsumer,
	isContextProvider: isContextProvider,
	isElement: isElement,
	isForwardRef: isForwardRef,
	isFragment: isFragment,
	isLazy: isLazy,
	isMemo: isMemo,
	isPortal: isPortal,
	isProfiler: isProfiler,
	isStrictMode: isStrictMode,
	isSuspense: isSuspense,
	isValidElementType: isValidElementType,
	typeOf: typeOf
};

var reactIs_development = createCommonjsModule(function (module, exports) {



if (process.env.NODE_ENV !== "production") {
  (function() {

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
// (unstable) APIs that have been removed. Can we remove the symbols?

var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
}

function typeOf(object) {
  if (typeof object === 'object' && object !== null) {
    var $$typeof = object.$$typeof;

    switch ($$typeof) {
      case REACT_ELEMENT_TYPE:
        var type = object.type;

        switch (type) {
          case REACT_ASYNC_MODE_TYPE:
          case REACT_CONCURRENT_MODE_TYPE:
          case REACT_FRAGMENT_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_SUSPENSE_TYPE:
            return type;

          default:
            var $$typeofType = type && type.$$typeof;

            switch ($$typeofType) {
              case REACT_CONTEXT_TYPE:
              case REACT_FORWARD_REF_TYPE:
              case REACT_LAZY_TYPE:
              case REACT_MEMO_TYPE:
              case REACT_PROVIDER_TYPE:
                return $$typeofType;

              default:
                return $$typeof;
            }

        }

      case REACT_PORTAL_TYPE:
        return $$typeof;
    }
  }

  return undefined;
} // AsyncMode is deprecated along with isAsyncMode

var AsyncMode = REACT_ASYNC_MODE_TYPE;
var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
var ContextConsumer = REACT_CONTEXT_TYPE;
var ContextProvider = REACT_PROVIDER_TYPE;
var Element = REACT_ELEMENT_TYPE;
var ForwardRef = REACT_FORWARD_REF_TYPE;
var Fragment = REACT_FRAGMENT_TYPE;
var Lazy = REACT_LAZY_TYPE;
var Memo = REACT_MEMO_TYPE;
var Portal = REACT_PORTAL_TYPE;
var Profiler = REACT_PROFILER_TYPE;
var StrictMode = REACT_STRICT_MODE_TYPE;
var Suspense = REACT_SUSPENSE_TYPE;
var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

function isAsyncMode(object) {
  {
    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
    }
  }

  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
}
function isConcurrentMode(object) {
  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
}
function isContextConsumer(object) {
  return typeOf(object) === REACT_CONTEXT_TYPE;
}
function isContextProvider(object) {
  return typeOf(object) === REACT_PROVIDER_TYPE;
}
function isElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}
function isForwardRef(object) {
  return typeOf(object) === REACT_FORWARD_REF_TYPE;
}
function isFragment(object) {
  return typeOf(object) === REACT_FRAGMENT_TYPE;
}
function isLazy(object) {
  return typeOf(object) === REACT_LAZY_TYPE;
}
function isMemo(object) {
  return typeOf(object) === REACT_MEMO_TYPE;
}
function isPortal(object) {
  return typeOf(object) === REACT_PORTAL_TYPE;
}
function isProfiler(object) {
  return typeOf(object) === REACT_PROFILER_TYPE;
}
function isStrictMode(object) {
  return typeOf(object) === REACT_STRICT_MODE_TYPE;
}
function isSuspense(object) {
  return typeOf(object) === REACT_SUSPENSE_TYPE;
}

exports.AsyncMode = AsyncMode;
exports.ConcurrentMode = ConcurrentMode;
exports.ContextConsumer = ContextConsumer;
exports.ContextProvider = ContextProvider;
exports.Element = Element;
exports.ForwardRef = ForwardRef;
exports.Fragment = Fragment;
exports.Lazy = Lazy;
exports.Memo = Memo;
exports.Portal = Portal;
exports.Profiler = Profiler;
exports.StrictMode = StrictMode;
exports.Suspense = Suspense;
exports.isAsyncMode = isAsyncMode;
exports.isConcurrentMode = isConcurrentMode;
exports.isContextConsumer = isContextConsumer;
exports.isContextProvider = isContextProvider;
exports.isElement = isElement;
exports.isForwardRef = isForwardRef;
exports.isFragment = isFragment;
exports.isLazy = isLazy;
exports.isMemo = isMemo;
exports.isPortal = isPortal;
exports.isProfiler = isProfiler;
exports.isStrictMode = isStrictMode;
exports.isSuspense = isSuspense;
exports.isValidElementType = isValidElementType;
exports.typeOf = typeOf;
  })();
}
});
var reactIs_development_1 = reactIs_development.AsyncMode;
var reactIs_development_2 = reactIs_development.ConcurrentMode;
var reactIs_development_3 = reactIs_development.ContextConsumer;
var reactIs_development_4 = reactIs_development.ContextProvider;
var reactIs_development_5 = reactIs_development.Element;
var reactIs_development_6 = reactIs_development.ForwardRef;
var reactIs_development_7 = reactIs_development.Fragment;
var reactIs_development_8 = reactIs_development.Lazy;
var reactIs_development_9 = reactIs_development.Memo;
var reactIs_development_10 = reactIs_development.Portal;
var reactIs_development_11 = reactIs_development.Profiler;
var reactIs_development_12 = reactIs_development.StrictMode;
var reactIs_development_13 = reactIs_development.Suspense;
var reactIs_development_14 = reactIs_development.isAsyncMode;
var reactIs_development_15 = reactIs_development.isConcurrentMode;
var reactIs_development_16 = reactIs_development.isContextConsumer;
var reactIs_development_17 = reactIs_development.isContextProvider;
var reactIs_development_18 = reactIs_development.isElement;
var reactIs_development_19 = reactIs_development.isForwardRef;
var reactIs_development_20 = reactIs_development.isFragment;
var reactIs_development_21 = reactIs_development.isLazy;
var reactIs_development_22 = reactIs_development.isMemo;
var reactIs_development_23 = reactIs_development.isPortal;
var reactIs_development_24 = reactIs_development.isProfiler;
var reactIs_development_25 = reactIs_development.isStrictMode;
var reactIs_development_26 = reactIs_development.isSuspense;
var reactIs_development_27 = reactIs_development.isValidElementType;
var reactIs_development_28 = reactIs_development.typeOf;

var reactIs = createCommonjsModule(function (module) {

if (process.env.NODE_ENV === 'production') {
  module.exports = reactIs_production_min;
} else {
  module.exports = reactIs_development;
}
});

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

var ReactPropTypesSecret_1 = ReactPropTypesSecret;

var printWarning = function() {};

if (process.env.NODE_ENV !== 'production') {
  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
  var loggedTypeFailures = {};
  var has = Function.call.bind(Object.prototype.hasOwnProperty);

  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error(
              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
            );
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning(
            (componentName || 'React class') + ': type specification of ' +
            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
            'You may have forgotten to pass an argument to the type checker ' +
            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
            'shape all require an argument).'
          );
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning(
            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
          );
        }
      }
    }
  }
}

/**
 * Resets warning cache when testing.
 *
 * @private
 */
checkPropTypes.resetWarningCache = function() {
  if (process.env.NODE_ENV !== 'production') {
    loggedTypeFailures = {};
  }
};

var checkPropTypes_1 = checkPropTypes;

var has$1 = Function.call.bind(Object.prototype.hasOwnProperty);
var printWarning$1 = function() {};

if (process.env.NODE_ENV !== 'production') {
  printWarning$1 = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret_1) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error(
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
          err.name = 'Invariant Violation';
          throw err;
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            printWarning$1(
              'You are manually calling a React.PropTypes validation ' +
              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!reactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if (process.env.NODE_ENV !== 'production') {
        if (arguments.length > 1) {
          printWarning$1(
            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
          );
        } else {
          printWarning$1('Invalid argument supplied to oneOf, expected an array.');
        }
      }
      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);
        if (type === 'symbol') {
          return String(value);
        }
        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (has$1(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? printWarning$1('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning$1(
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
        );
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = objectAssign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError(
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // falsy value can't be a Symbol
    if (!propValue) {
      return false;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes_1;
  ReactPropTypes.resetWarningCache = checkPropTypes_1.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;

var factoryWithThrowingShims = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret_1) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error(
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
    err.name = 'Invariant Violation';
    throw err;
  }  shim.isRequired = shim;
  function getShim() {
    return shim;
  }  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,

    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };

  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

var propTypes = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (process.env.NODE_ENV !== 'production') {
  var ReactIs = reactIs;

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = factoryWithThrowingShims();
}
});

const theme = {
  intensity: 18,
  distance: 5,
  colors: {
    lightGray: '#929292',
    darkGray: '#525252'
  }
};

/* eslint-disable import/prefer-default-export */

/* eslint-disable no-inline-comments */
const colorLuminance = (hex, lum = 0) => {
  // Validate hex string
  let copyHex = String(hex).replace(/[^0-9a-f]/gi, '');

  if (hex.length < 6) {
    copyHex = copyHex[0] + copyHex[0] + copyHex[1] + copyHex[1] + copyHex[2] + copyHex[2];
  } // Convert to decimal and change luminosity


  let rgb = '#';
  let c;
  let i;

  for (i = 0; i < 3; i++) {
    c = parseInt(copyHex.substr(i * 2, 2), 16);
    c = Math.round(Math.min(Math.max(0, c + c * lum), 255)).toString(16);
    /*
     *   We concat c with 00 and take the substring starting at the index
     *   wich equal the length of c.
     *   That allows us to take 00 if c.length === 0
     *   or take 0c if c.length === 1
     *   or just take c if c.length === 2
     */

    rgb += `00${c}`.substr(c.length);
  }

  return rgb;
};
const getDarkBoxShadow = (color, distance = 5, intensity = 15, inset = false) => {
  const blur = 10 + 2 * (distance - 5);
  const lum = intensity / 100;
  return `${inset ? 'inset ' : ''}-${distance}px -${distance}px ${blur}px ${colorLuminance(color, lum)}`;
};
const getLightBoxShadow = (color, distance = 5, intensity = 15, inset = false) => {
  const blur = 10 + 2 * (distance - 5);
  const lum = intensity / 100 * -1;
  return `${inset ? 'inset ' : ''}${distance}px ${distance}px ${blur}px ${colorLuminance(color, lum)}`;
};

const NeuDiv = ({
  children,
  width,
  height,
  revert,
  color,
  radius,
  distance,
  column,
  ...props
}) => React__default.createElement(DivWrapper, _extends({
  "data-testid": "neudiv-wrapper",
  width: width,
  height: height,
  revert: revert,
  color: color,
  radius: radius,
  distance: distance,
  column: column // eslint-disable-next-line react/jsx-props-no-spreading

}, props), children);

NeuDiv.propTypes = {
  children: propTypes.oneOfType([propTypes.arrayOf(propTypes.node), propTypes.node]),
  width: propTypes.string,
  height: propTypes.string,
  distance: propTypes.number,
  radius: propTypes.number,
  revert: propTypes.bool,
  column: propTypes.bool,
  color: propTypes.string
};
NeuDiv.defaultProps = {
  children: null,
  width: '100%',
  height: '100%',
  distance: theme.distance,
  radius: 25,
  revert: false,
  column: false,
  color: theme.colors.lightGray
};
const DivWrapper = styled.div`
  border-radius: ${props => props.radius}px;
  background: ${props => props.color};
  box-shadow: ${props => props.revert ? `${getLightBoxShadow(props.color, props.distance, theme.intensity, true)}, ${getDarkBoxShadow(props.color, props.distance, theme.intensity, true)}` : `${getLightBoxShadow(props.color, props.distance, theme.intensity, false)}, ${getDarkBoxShadow(props.color, props.distance, theme.intensity, false)}`};
  margin: auto;
  width: ${props => props.width};
  height: ${props => props.height};
  position: relative;
  display: flex;
  flex-direction: ${props => props.column ? 'column' : 'row'};
  font-size: 20px;
  color: ${() => theme.colors.darkGray};
`;

const NeuButton = ({
  children,
  width,
  height,
  onClick,
  radius,
  color,
  distance,
  ...props
}) => React__default.createElement(ButtonWrapper, _extends({
  "data-testid": "neubutton-wrapper",
  width: width,
  height: height,
  onClick: onClick,
  radius: radius,
  color: color,
  distance: distance // eslint-disable-next-line react/jsx-props-no-spreading

}, props), children);

NeuButton.propTypes = {
  children: propTypes.oneOfType([propTypes.arrayOf(propTypes.node), propTypes.node]),
  width: propTypes.string,
  height: propTypes.string,
  radius: propTypes.number,
  onClick: propTypes.func,
  color: propTypes.string,
  distance: propTypes.number
};
NeuButton.defaultProps = {
  children: null,
  width: '100%',
  height: '100%',
  radius: 25,
  onClick: null,
  color: theme.colors.lightGray,
  distance: theme.distance
};
const ButtonWrapper = styled.button`
  border: none;
  border-radius: ${props => props.radius}px;
  background-color: ${props => props.color};
  box-shadow: ${props => `${getLightBoxShadow(props.color, props.distance, theme.intensity, false)}, ${getDarkBoxShadow(props.color, props.distance, theme.intensity, false)}, ${getLightBoxShadow(props.color, 0, theme.intensity, true)}, ${getDarkBoxShadow(props.color, 0, theme.intensity, true)}`};
  margin: auto;
  width: ${props => props.width};
  height: ${props => props.height};
  transition: box-shadow 0.1s ease;
  outline: none;
  &:enabled:active {
    box-shadow: ${props => `${getLightBoxShadow(props.color, 0, theme.intensity, false)}, ${getDarkBoxShadow(props.color, 0, props.intensity, false)}, ${getLightBoxShadow(props.color, props.distance, theme.intensity, true)}, ${getDarkBoxShadow(props.color, theme.distance, theme.intensity, true)}`};
  }
  position: relative;
  font-size: 20px;
  color: ${() => theme.colors.darkGray};
  cursor: pointer;
`;

const tirets = [{
  hour: 1,
  teta: 30
}, {
  hour: 2,
  teta: 60
}, {
  hour: 3,
  teta: 90
}, {
  hour: 4,
  teta: 120
}, {
  hour: 5,
  teta: 150
}, {
  hour: 6,
  teta: 180
}, {
  hour: 7,
  teta: 210
}, {
  hour: 8,
  teta: 240
}, {
  hour: 9,
  teta: 270
}, {
  hour: 10,
  teta: 300
}, {
  hour: 11,
  teta: 330
}, {
  hour: 12,
  teta: 360
}];

const NeuClock = ({
  donut,
  color,
  distance,
  ...props
}) => {
  const size = 260;
  const innerWidth = size - 20;
  const innerClockWidth = 195;

  const getTetaDegree = teta => teta * (Math.PI / 180);

  const getSecondsDegree = (seconds, milliseconds) => (seconds + milliseconds / 1000) * 360 / 60;

  const getMinutesDegree = minutes => minutes * 360 / 60;

  const getHoursDegree = (hours, minutes) => (hours + minutes / 60) * 360 / 12;

  const getX = teta => innerWidth / 2 * Math.sin(getTetaDegree(teta));

  const getY = teta => innerWidth / 2 * Math.cos(getTetaDegree(teta));

  const secondsRef = React.useRef();
  const minutesRef = React.useRef();
  const hoursRef = React.useRef();

  const animate = () => {
    var _secondsRef$current, _secondsRef$current2, _secondsRef$current3;

    const now = new Date();

    if (secondsRef === null || secondsRef === void 0 ? void 0 : (_secondsRef$current = secondsRef.current) === null || _secondsRef$current === void 0 ? void 0 : _secondsRef$current.style) {
      secondsRef.current.style.transform = `rotate(${getSecondsDegree(now.getSeconds(), now.getMilliseconds())}deg)`;
    }

    if (secondsRef === null || secondsRef === void 0 ? void 0 : (_secondsRef$current2 = secondsRef.current) === null || _secondsRef$current2 === void 0 ? void 0 : _secondsRef$current2.style) {
      minutesRef.current.style.transform = `rotate(${getMinutesDegree(now.getMinutes())}deg)`;
    }

    if (secondsRef === null || secondsRef === void 0 ? void 0 : (_secondsRef$current3 = secondsRef.current) === null || _secondsRef$current3 === void 0 ? void 0 : _secondsRef$current3.style) {
      hoursRef.current.style.transform = `rotate(${getHoursDegree(now.getHours(), now.getMinutes())}deg)`;
    }

    requestAnimationFrame(animate);
  };

  React.useEffect(() => {
    requestAnimationFrame(animate);
  }, []);
  return (// eslint-disable-next-line react/jsx-props-no-spreading
    React__default.createElement(Clock, _extends({}, props, {
      size: size,
      color: color,
      distance: distance,
      "data-testid": "neuclock-clock"
    }), React__default.createElement(InnerClock, {
      size: innerClockWidth,
      donut: donut,
      color: color,
      distance: distance,
      "data-testid": "neuclock-innerclock"
    }, tirets.map(tiret => React__default.createElement(TiretPos, {
      key: tiret.hour,
      x: getX(tiret.teta),
      y: getY(tiret.teta),
      teta: tiret.teta
    }, React__default.createElement(Tiret, null))), React__default.createElement(CenterPos, null, React__default.createElement(Center, null, React__default.createElement(Seconds, {
      ref: secondsRef
    }), React__default.createElement(Minutes, {
      ref: minutesRef
    }), React__default.createElement(Hours, {
      ref: hoursRef
    })))))
  );
};

NeuClock.propTypes = {
  donut: propTypes.bool,
  color: propTypes.string,
  distance: propTypes.number
};
NeuClock.defaultProps = {
  donut: false,
  color: theme.colors.lightGray,
  distance: theme.distance
};
const Clock = styled.div`
  margin: auto;
  border-radius: 100%;
  display: flex;
  width: ${props => `${props.size}px`};
  height: ${props => `${props.size}px`};
  background-color: ${props => props.color};
  /* background: linear-gradient(145deg, #b8b8b8, #b8b8b8 20%, #dadada); */
  box-shadow: ${props => `${getLightBoxShadow(props.color, props.distance, theme.intensity, false)}, ${getDarkBoxShadow(props.color, props.distance, theme.intensity, false)}`};
`;
const InnerClock = styled.div`
  width: ${props => `${props.size}px`};
  height: ${props => `${props.size}px`};
  border: ${props => props.donut ? `16px solid ${props.color}` : 'none'};
  box-shadow: ${props => props.donut ? `${getLightBoxShadow(props.color, props.distance, theme.intensity, true)}, ${getDarkBoxShadow(props.color, props.distance, theme.intensity, true)}` : 'none'};
  margin: auto;
  position: relative;
  border-radius: 100%;
  background: none;
`;
const TiretPos = styled.div`
  width: 1px;
  height: 1px;
  position: absolute;
  top: ${props => `calc(50% - ${props.x}px)`};
  left: ${props => `calc(50% - ${props.y}px)`};
  -moz-transform: ${props => `rotate(${props.teta}deg)`};
  -ms-transform: ${props => `rotate(${props.teta}deg)`};
  -webkit-transform: ${props => `rotate(${props.teta}deg)`};
  transform: ${props => `rotate(${props.teta}deg)`};
`;
const Tiret = styled.div`
  width: 100%;
  height: 100%;
  position: relative;
  &::before {
    content: '';
    position: absolute;
    width: 14px;
    height: 6px;
    top: -2px;
    border-radius: 2px;
    background-color: ${() => theme.colors.darkGray};
  }
`;
const CenterPos = styled.div`
  width: 8px;
  height: 8px;
  position: absolute;
  top: calc(50% - 4px);
  left: calc(50% - 4px);
`;
const Center = styled.div`
  width: 100%;
  height: 100%;
  position: relative;
  background-color: ${() => theme.colors.darkGray};
  border-radius: 10px;
  z-index: 3;
`;
const Seconds = styled.div`
  width: 2px;
  height: 90px;
  position: absolute;
  bottom: calc(50%);
  left: calc(50% - 1px);
  background-color: ${() => theme.colors.darkGray};
  border-radius: 40px;
  z-index: 2;

  -moz-transform: rotate(0deg);
  -ms-transform: rotate(0deg);
  -webkit-transform: rotate(0deg);
  transform: rotate(0deg);
  -moz-transform-origin: bottom; /* Set transform origin to center bottom */
  -ms-transform-origin: bottom;
  -webkit-transform-origin: bottom;
  transform-origin: bottom;
`;
const Minutes = styled.div`
  width: 4px;
  height: 90px;
  position: absolute;
  bottom: calc(50%);
  left: calc(50% - 2px);
  background-color: ${() => theme.colors.darkGray};
  border-radius: 40px;
  z-index: 1;

  -moz-transform: rotate(0deg);
  -ms-transform: rotate(0deg);
  -webkit-transform: rotate(0deg);
  transform: rotate(60deg);
  -moz-transform-origin: bottom; /* Set transform origin to center bottom */
  -ms-transform-origin: bottom;
  -webkit-transform-origin: bottom;
  transform-origin: bottom;
`;
const Hours = styled.div`
  width: 4px;
  height: 75px;
  position: absolute;
  bottom: calc(50%);
  left: calc(50% - 2px);
  background-color: rgba(153, 42, 18, 1);
  box-shadow: 0px 0px 15px 1px rgba(153, 42, 18, 0.4);
  border-radius: 40px;
  z-index: 0;

  -moz-transform: rotate(0deg);
  -ms-transform: rotate(0deg);
  -webkit-transform: rotate(0deg);
  transform: rotate(90deg);
  -moz-transform-origin: bottom; /* Set transform origin to center bottom */
  -ms-transform-origin: bottom;
  -webkit-transform-origin: bottom;
  transform-origin: bottom;
`;

/* eslint-disable import/prefer-default-export */
const getPercentageDecimal = (value = 0, range, decimal = 1) => (range ? value / range : 0).toFixed(decimal);

const shadowDistance = 3;

const NeuSlider = ({
  min,
  max,
  color,
  onChange,
  distance,
  ...props
}) => {
  const [value, setValue] = React.useState(0);

  const handleChange = event => {
    var _event$target;

    const newValue = event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.value;
    setValue(newValue || value);

    if (onChange) {
      onChange(newValue || value);
    }
  };

  return (// eslint-disable-next-line react/jsx-props-no-spreading
    React__default.createElement(NeuDiv, _extends({
      distance: distance,
      height: "45px",
      color: color,
      radius: 10
    }, props), React__default.createElement(Slider, {
      "data-testid": "neuslider-slider",
      min: min,
      max: max,
      value: value,
      color: color,
      onChange: event => handleChange(event),
      percentage: getPercentageDecimal(value, max)
    }))
  );
};

NeuSlider.propTypes = {
  onChange: propTypes.func,
  min: propTypes.number,
  max: propTypes.number,
  color: propTypes.string,
  distance: propTypes.number
};
NeuSlider.defaultProps = {
  onChange: null,
  min: 0,
  max: 255,
  color: theme.colors.lightGray,
  distance: theme.distance
};
const Slider = styled.input`
  margin: auto 25px;
  width: 100%;
  height: 0;
  border: 1px dashed ${theme.colors.darkGray};
  -webkit-appearance: none; /* Override default CSS styles */
  appearance: none;
  background: ${props => props.color};
  position: relative;
  z-index: 10;
  outline: none;

  /* The slider handle (use -webkit- (Chrome, Opera, Safari, Edge) and -moz- (Firefox) to override default look) */
  &::-webkit-slider-thumb {
    z-index: 50;
    -webkit-appearance: none; /* Override default look */
    appearance: none;
    width: 10px; /* Set a specific slider handle width */
    height: 25px; /* Slider handle height */
    background: ${theme.colors.lightGray};
    cursor: pointer; /* Cursor on hover */
    border: none;
    border-radius: 3px;
    box-shadow: ${props => `${getLightBoxShadow(props.color, shadowDistance, theme.intensity, false)}, ${getDarkBoxShadow(props.color, shadowDistance, theme.intensity, false)}`};
  }

  &::-moz-range-thumb {
    z-index: 50;
    width: 10px; /* Set a specific slider handle width */
    height: 25px; /* Slider handle height */
    background: ${theme.colors.lightGray};
    cursor: pointer; /* Cursor on hover */
    border: none;
    border-radius: 3px;
    box-shadow: ${props => `${getLightBoxShadow(props.color, shadowDistance, theme.intensity, false)}, ${getDarkBoxShadow(props.color, shadowDistance, theme.intensity, false)}`};
  }

  /* Remove dotted outline on firefox */
  &::-moz-focus-outer {
    border: 0;
  }

  &::before {
    z-index: -1;
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
    top: -1px;
    left: -1px;
    border: 1px dashed rgba(153, 42, 18, 1);
    opacity: ${props => props.percentage};
  }

  &::after {
    z-index: -1;
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
    top: -1px;
    left: -1px;
    box-shadow: 0px 0px 10px 4px rgba(153, 42, 18, 0.4);
    opacity: ${props => props.percentage};
  }
`;
Slider.defaultProps = {
  type: 'range'
};

const NeuProgress = ({
  progress,
  color,
  distance,
  ...props
}) => // eslint-disable-next-line react/jsx-props-no-spreading
React__default.createElement(NeuDiv, _extends({
  height: "45px",
  color: color,
  radius: 10,
  distance: distance
}, props), React__default.createElement(ProgressWrapper, {
  "data-testid": "neuprogress-wrapper"
}, React__default.createElement(NeuDiv, {
  distance: 3,
  height: "15px",
  color: color,
  radius: 4,
  revert: true
}, React__default.createElement(Progress, {
  progress: progress > 100 ? 100 : progress,
  radius: 4,
  "data-testid": "neuprogress-progress"
}))));

NeuProgress.propTypes = {
  progress: propTypes.number,
  color: propTypes.string,
  distance: propTypes.number
};
NeuProgress.defaultProps = {
  progress: 0,
  color: theme.colors.lightGray,
  distance: theme.distance
};
const ProgressWrapper = styled.div`
  margin: auto 10px;
  width: 100%;
`;
const Progress = styled.div`
  width: ${props => props.progress}%;
  height: 100%;
  background: rgba(153, 42, 18, 1);
  box-shadow: ${props => props.progress <= 0 ? 'none' : '0px 0px 10px 4px rgba(153,42,18,0.4)'};
  border-radius: ${props => props.radius}px;
`;

const NeuRadio = ({
  data,
  color,
  radio,
  onChange,
  distance,
  ...props
}) => {
  const [selected, setSelected] = React.useState(radio ? null : []);

  const handleClick = d => {
    let selectedSnapshot = selected;

    if (radio) {
      selectedSnapshot = d === selected ? null : d;
    } else if (selected === null || selected === void 0 ? void 0 : selected.find(f => d === f)) {
      selectedSnapshot = selected === null || selected === void 0 ? void 0 : selected.filter(f => d !== f);
    } else {
      selectedSnapshot = selected === null || selected === void 0 ? void 0 : selected.concat(d);
    }

    setSelected(selectedSnapshot);

    if (onChange) {
      onChange(selectedSnapshot);
    }
  };

  const checkSelected = d => radio ? d === selected : selected === null || selected === void 0 ? void 0 : selected.find(f => d === f);

  return (// eslint-disable-next-line react/jsx-props-no-spreading
    React__default.createElement(Wrapper, _extends({
      "data-testid": "neuradio-wrapper"
    }, props), data && (data === null || data === void 0 ? void 0 : data.length) !== 0 && data.map((d, index) => React__default.createElement(RadioBlockWrapper, {
      key: d + index
    }, React__default.createElement(Radio, {
      "data-testid": `neuradio-radio-${d}`,
      color: color,
      selected: checkSelected(d),
      onClick: () => handleClick(d),
      distance: distance
    }, React__default.createElement(RadioInput, {
      id: d
    })), React__default.createElement(RadioText, {
      htmlFor: d
    }, d))))
  );
};

NeuRadio.propTypes = {
  data: propTypes.arrayOf(propTypes.oneOfType([propTypes.string, propTypes.number])),
  color: propTypes.string,
  radio: propTypes.bool,
  onChange: propTypes.func,
  distance: propTypes.number
};
NeuRadio.defaultProps = {
  data: null,
  color: theme.colors.lightGray,
  radio: false,
  onChange: null,
  distance: 4
};
const Wrapper = styled.div`
  margin: auto;
  display: grid;
  grid-template-columns: repeat(1, 1fr);
  grid-gap: 1rem;
`;
const RadioBlockWrapper = styled.div`
  margin: auto;
  display: flex;
`;
const RadioText = styled.label`
  margin: auto;
  margin-left: 20px;
  margin-bottom: 2px;
  font-size: ${props => `${props.fontSize}px`};
  color: ${() => theme.colors.darkGray};
  outline: none;
`;
const RadioInput = styled.input`
  position: absolute;
  left: -900px;
`;
RadioInput.defaultProps = {
  type: 'checkbox'
};
const Radio = styled.button`
  outline: none;
  margin: auto;
  padding: 0;
  width: 25px;
  height: 25px;
  border: none;
  border-radius: 100%;
  background-color: ${props => props.color};
  box-shadow: ${props => props.selected ? `${getLightBoxShadow(props.color, 2, theme.intensity, true)}, ${getDarkBoxShadow(props.color, 2, theme.intensity, true)}` : `${getLightBoxShadow(props.color, props.distance, theme.intensity, false)}, ${getDarkBoxShadow(props.color, props.distance, theme.intensity, false)}`};
  position: relative;
  font-size: 20px;
  color: ${() => theme.colors.darkGray};
  cursor: pointer;
  &::before {
    content: '';
    position: absolute;
    width: 5px;
    height: 5px;
    top: 10px;
    left: 10px;
    z-index: 1;
    /* transition: all 0.3s ease-in-out; */
    border-radius: 100%;
    background: ${props => props.selected ? 'rgba(153, 42, 18, 1)' : theme.colors.darkGray};
    box-shadow: ${props => props.selected ? '0px 0px 10px 4px rgba(153,42,18,0.4)' : 'none'};
  }
`;

const sizes = {
  medium: {
    divWidth: 120,
    divHeight: 80,
    divRadius: 25,
    toggleWidth: 80,
    toggleHeight: 40,
    roundSize: 34,
    roundTop: 3,
    roundLefts: [3, 43],
    dotTop: 16,
    dotLefts: [16, 56],
    dotSize: 8
  },
  small: {
    divWidth: 60,
    divHeight: 40,
    divRadius: 15,
    toggleWidth: 40,
    toggleHeight: 20,
    roundSize: 17,
    roundTop: 1.5,
    roundLefts: [1.5, 21.5],
    dotTop: 8,
    dotLefts: [8, 28],
    dotSize: 4
  }
};

const NeuToggle = ({
  size,
  color,
  onChange,
  distance,
  ...props
}) => {
  const [toggle, setToggle] = React.useState(false);
  const {
    divWidth,
    divHeight,
    divRadius
  } = sizes[size] || {};

  const handleClick = () => {
    const newValue = !toggle;
    setToggle(newValue);

    if (onChange) {
      onChange(newValue);
    }
  };

  return React__default.createElement(ToggleWrapper, _extends({
    "data-testid": "neutoggle-wrapper",
    width: divWidth,
    height: divHeight,
    radius: divRadius,
    color: color,
    distance: distance // eslint-disable-next-line react/jsx-props-no-spreading

  }, props), React__default.createElement(Toggle, {
    "data-testid": "neutoggle-toggle",
    size: sizes[size],
    toggle: toggle,
    onClick: handleClick,
    color: color
  }));
};

NeuToggle.propTypes = {
  size: propTypes.oneOf(['big', 'medium', 'small']),
  color: propTypes.string,
  onChange: propTypes.func,
  distance: propTypes.number
};
NeuToggle.defaultProps = {
  size: 'small',
  color: theme.colors.lightGray,
  onChange: null,
  distance: theme.distance
};
const ToggleWrapper = styled.div`
  border-radius: ${props => `${props.radius}px`};
  background: ${() => theme.colors.lightGray};
  box-shadow: ${props => `${getLightBoxShadow(props.color, props.distance, theme.intensity, false)}, ${getDarkBoxShadow(props.color, props.distance, theme.intensity, false)}`};
  margin: auto;
  width: ${props => `${props.width}px`};
  height: ${props => `${props.height}px`};
  position: relative;
  display: flex;
`;
const Toggle = styled.div`
  border-radius: 40px;
  background: ${() => theme.colors.lightGray};
  border: 4px solid ${() => theme.colors.lightGray};
  /* box-shadow: 6px 6px 13px #b4b4b4, -6px -6px 13px #e4e4e4, inset 6px 6px 13px #b4b4b4, inset -6px -6px 13px #e4e4e4; */
  box-shadow: ${props => `${getLightBoxShadow(props.color, 6, theme.intensity, false)}, ${getDarkBoxShadow(props.color, 1, theme.intensity, false)}, ${getLightBoxShadow(props.color, 6, theme.intensity, true)}, ${getDarkBoxShadow(props.color, 1, theme.intensity, true)}`};

  margin: auto;
  width: ${props => `${props.size.toggleWidth}px`};
  height: ${props => `${props.size.toggleHeight}px`};
  position: relative;

  cursor: pointer;

  &::after {
    content: '';
    transition: left 0.3s ease-in-out;
    border-radius: 40px;
    position: absolute;
    top: ${props => `${props.size.roundTop}px`};
    left: ${props => props.toggle ? `${props.size.roundLefts[1]}px` : `${props.size.roundLefts[0]}px`};
    width: ${props => `${props.size.roundSize}px`};
    height: ${props => `${props.size.roundSize}px`};
    background: ${() => theme.colors.lightGray};
    /* box-shadow: 1px 1px 13px #727272, -1px -1px 13px #cccccc; */
    box-shadow: ${props => `${getLightBoxShadow(props.color, 1, theme.intensity, false)}, ${getDarkBoxShadow(props.color, 1, theme.intensity, false)}`};
  }

  &::before {
    content: '';
    z-index: 1;
    transition: all 0.3s ease-in-out;
    border-radius: 50px;
    position: absolute;
    top: ${props => `${props.size.dotTop}px`};
    left: ${props => props.toggle ? `${props.size.dotLefts[1]}px` : `${props.size.dotLefts[0]}px`};
    width: ${props => `${props.size.dotSize}px`};
    height: ${props => `${props.size.dotSize}px`};
    background: ${props => props.toggle ? 'rgba(153, 42, 18, 1)' : theme.colors.darkGray};
    box-shadow: ${props => props.toggle ? '0px 0px 10px 4px rgba(153,42,18,0.4)' : 'none'};
  }
`;

const NeuTextInput = ({
  width,
  height,
  fontSize,
  placeholder,
  color,
  onChange,
  fontColor,
  distance,
  ...props
}) => {
  const [value, setValue] = React.useState('');

  const handleChange = event => {
    var _event$target;

    const newValue = event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.value;
    setValue(newValue);

    if (onChange) {
      onChange(newValue === '' ? null : newValue);
    }
  };

  return React__default.createElement(Input, _extends({
    "data-testid": "neutextinput-input",
    height: height,
    width: width,
    fontSize: fontSize,
    placeholder: placeholder,
    color: color,
    value: value,
    onChange: event => handleChange(event),
    fontColor: fontColor,
    distance: distance // eslint-disable-next-line react/jsx-props-no-spreading

  }, props));
};

NeuTextInput.propTypes = {
  width: propTypes.string,
  height: propTypes.string,
  fontSize: propTypes.number,
  placeholder: propTypes.string,
  color: propTypes.string,
  onChange: propTypes.func,
  fontColor: propTypes.string,
  distance: propTypes.number
};
NeuTextInput.defaultProps = {
  width: '100%',
  height: '50px',
  fontSize: 20,
  placeholder: 'Placeholder',
  color: theme.colors.lightGray,
  onChange: null,
  fontColor: theme.colors.darkGray,
  distance: theme.distance
};
const Input = styled.input`
  margin: auto;
  width: ${props => props.width};
  height: ${props => props.height};
  position: relative;
  box-sizing: border-box;
  border-radius: 40px;
  background-color: ${props => props.color};
  border: 4px solid ${props => props.color};
  box-shadow: ${props => `${getLightBoxShadow(props.color, props.distance, theme.intensity, false)}, ${getDarkBoxShadow(props.color, props.distance, theme.intensity, false)}, ${getLightBoxShadow(props.color, props.distance, theme.intensity, true)}, ${getDarkBoxShadow(props.color, props.distance, theme.intensity, true)}`};
  padding: 0 1.5rem;
  font-size: ${props => `${props.fontSize}px`};
  color: ${props => props.fontColor};
  outline: none;
`;
Input.defaultProps = {
  type: 'text'
};

exports.NeuButton = NeuButton;
exports.NeuClock = NeuClock;
exports.NeuDiv = NeuDiv;
exports.NeuProgress = NeuProgress;
exports.NeuRadio = NeuRadio;
exports.NeuSlider = NeuSlider;
exports.NeuTextInput = NeuTextInput;
exports.NeuToggle = NeuToggle;
